{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport axios from \"axios\";\nimport { Web3Storage } from \"web3.storage/dist/bundle.esm.min.cjs\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\nfunction getAccessToken() {\n  // If you're just testing, you can paste in a token\n  // and uncomment the following line:\n  // return 'paste-your-token-here'\n  // In a real app, it's better to read an access token from an\n  // environement variable or other configuration that's kept outside of\n  // your code base. For this to work, you need to set the\n  // WEB3STORAGE_TOKEN environment variable before you run your code.\n  return process.env.NEXT_PUBLIC_WEB3STORAGE_TOKEN;\n}\n\nfunction makeStorageClient() {\n  return new Web3Storage({\n    token: getAccessToken()\n  });\n}\n\nexport const IPFS_RETRIEVE_URL = \"https://w3s.link/ipfs/\";\nexport const exportSignatureAsSVG = signature => {\n  const imgSVG = __jsx(\"svg\", {\n    id: \"mysvg\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    preserveAspectRatio: \"xMinYMin meet\",\n    viewBox: \"0 0 350 350\",\n    fill: \"#FFC059\"\n  }, __jsx(\"rect\", {\n    width: \"100%\",\n    height: \"70%\",\n    fill: \"black\"\n  }), __jsx(\"text\", {\n    x: \"50%\",\n    y: \"25%\",\n    textAnchor: \"middle\",\n    style: {\n      fontFamily: \"Gochi Hand, cursive\",\n      fontSize: \"28px\"\n    }\n  }, __jsx(\"tspan\", {\n    x: \"50%\",\n    dy: \"1.2em\"\n  }, signature)));\n\n  return renderToStaticMarkup(imgSVG);\n};\nexport const exportSignatureAsPNGFile = async base64EncodedImage => {\n  const fetchSignature = await fetch(base64EncodedImage);\n  const blob = await fetchSignature.blob();\n  const file = new File([blob], \"signature.png\", {\n    type: \"image/png\"\n  });\n  return file;\n};\nexport const convertToBuffer = async svgElement => {\n  const svgBuffer = Buffer.from(svgElement);\n  return svgBuffer;\n}; // export const addDataToNFTStorage = async (metadata) => {\n//   const metadata = await nftStorageClient.store({\n//     name: \"Pinpie\",\n//     description: \"Pin is not delicious beef!\",\n//     image: new NFTStorageFile(\n//       [\n//         /* data */\n//       ],\n//       \"pinpie.jpg\",\n//       { type: \"image/jpg\" }\n//     ),\n//   });\n//   console.log(metadata.url);\n// };\n\nexport const addDataToIPFS = async (metadata, metadataTypeImage = false) => {\n  const client = makeStorageClient();\n  let newMetadata = null;\n\n  if (metadataTypeImage) {\n    newMetadata = [metadata];\n  } else {\n    const blob = new Blob([JSON.stringify(metadata)], {\n      type: \"application/json\"\n    });\n    newMetadata = [new File([blob], \"hello.json\")];\n  }\n\n  const hash = await client.put(newMetadata);\n  return hash;\n};\nexport const retrieveDataFromIPFS = async ipfsHash => {\n  const result = await axios.get(`https://${ipfsHash}.ipfs.w3s.link/hello.json`);\n  return result;\n};\nexport const createNFTMeta = (imgHash, signature) => {\n  // More Information - https://docs.opensea.io/docs/metadata-standards\n  return {\n    image: `https://ipfs.io/ipfs/${imgHash}`,\n    web3Storage: `https://${imgHash}.ipfs.w3s.link/signature.png`,\n    name: signature,\n    description: \"An NFT from the highly acclaimed OneMillionSignature DAO\",\n    attributes: [{\n      trait_type: \"Signature\",\n      value: signature\n    }, {\n      display_type: \"date\",\n      trait_type: \"minted on\",\n      value: Date.now()\n    }]\n  };\n};","map":null,"metadata":{},"sourceType":"module"}