{"ast":null,"code":"import _defineProperty from \"/home/harshitsinghai/Documents/Projects/web3/signature-dao/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/harshitsinghai/Documents/Projects/web3/signature-dao/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/harshitsinghai/Documents/Projects/web3/signature-dao/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/** @jsx jsx */\nimport { useState, useEffect, useContext, useRef } from \"react\";\nimport { jsx, Box, Flex, Container, Heading, Text, Input, Button, Image } from \"theme-ui\";\nimport { rgba } from \"polished\";\nimport { ethers } from \"ethers\";\nimport Loader from \"react-loader-spinner\";\nimport CanvasText from \"components/canvasText/CanvasText\";\nimport CanvasSignature from \"components/canvasText/canvasSignature\";\nimport Modal from \"components/modal/\";\nimport ConfettiComponent from \"components/confetti/\";\nimport RadioSelect from \"components/radio\";\nimport { getContract } from \"utils/getContact\";\nimport { exportSignatureAsSVG, exportSignatureAsPNGFile, convertToBuffer, addDataToIPFS, retrieveDataFromIPFS, createNFTMeta, IPFS_RETRIEVE_URL } from \"utils/signature\";\nimport { Web3CreateContext } from \"contexts/web3-context\";\nimport { defaultProvider } from \"utils/web3connect\";\nimport { TRANSACTION_LINK, OPENSEA_LINK, OPENSEA_COLLECTION_LINK } from \"utils/constants\";\nimport { calculateSignatureSizePrice } from \"utils/getSignatureSizePrice\";\nimport paypal from \"assets/images/paypal.png\";\nimport google from \"assets/images/google.png\";\nimport dropbox from \"assets/images/dropbox.png\";\nexport var txnStatusType = {\n  CONFIRMED: \"CONFIRMED\",\n  PENDING: \"PENDING\",\n  REVERTED: \"REVERTED\"\n}; // if true then use canvas to create singature else create and use SVG as an NFT\n\nvar enableCanvasSignature = true;\n\nvar HomePage = function HomePage() {\n  var _useContext = useContext(Web3CreateContext),\n      state = _useContext.state;\n\n  var address = state.address,\n      web3Provider = state.web3Provider;\n  var textCanvasRef = useRef();\n  var handwrittenCanvasRef = useRef();\n\n  var _useState = useState(\"\"),\n      signature = _useState[0],\n      setSignature = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      randomName = _useState2[0],\n      setRandomName = _useState2[1];\n\n  var _useState3 = useState(2),\n      xPricePerUnit = _useState3[0],\n      setXPricePerUnit = _useState3[1];\n\n  var _useState4 = useState(0.5),\n      pricePerUnit = _useState4[0],\n      setPricePerUnit = _useState4[1];\n\n  var _useState5 = useState([8, 16, 24]),\n      customSignatureUnits = _useState5[0],\n      setCustomSignatureUnits = _useState5[1];\n\n  var _useState6 = useState(false),\n      isEligibleToMint = _useState6[0],\n      setIsEligibleToMint = _useState6[1];\n\n  var _useState7 = useState(false),\n      showConfetti = _useState7[0],\n      setShowConfetti = _useState7[1];\n\n  var _useState8 = useState(false),\n      isEligibleToDiscount = _useState8[0],\n      setIsEligibleToDiscount = _useState8[1];\n\n  var _useState9 = useState(),\n      existingSignature = _useState9[0],\n      setExistingSignature = _useState9[1];\n\n  var _useState10 = useState(false),\n      isLoading = _useState10[0],\n      setIsLoading = _useState10[1];\n\n  var _useState11 = useState(0),\n      totalPrice = _useState11[0],\n      setTotalPrice = _useState11[1];\n\n  var _useState12 = useState(false),\n      toggleHandSignature = _useState12[0],\n      setToggleHandSignature = _useState12[1];\n\n  var _useState13 = useState(),\n      txn = _useState13[0],\n      setTxn = _useState13[1];\n\n  var _useState14 = useState(false),\n      openModal = _useState14[0],\n      setOpenModal = _useState14[1];\n\n  var _useState15 = useState(\"\"),\n      errorMessage = _useState15[0],\n      setErrorMessage = _useState15[1];\n\n  var getSignature = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var signatureNFT, base64EncodedImage, _base64EncodedImage, signatureSVG;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!toggleHandSignature) {\n                _context.next = 7;\n                break;\n              }\n\n              // HandwrittenSignature\n              base64EncodedImage = getHandwrittenCanvasSignature();\n              _context.next = 4;\n              return exportSignatureAsPNGFile(base64EncodedImage);\n\n            case 4:\n              signatureNFT = _context.sent;\n              _context.next = 18;\n              break;\n\n            case 7:\n              if (!enableCanvasSignature) {\n                _context.next = 14;\n                break;\n              }\n\n              // Export text signature from canvas as png\n              _base64EncodedImage = getTextCanvasSignature();\n              _context.next = 11;\n              return exportSignatureAsPNGFile(_base64EncodedImage);\n\n            case 11:\n              signatureNFT = _context.sent;\n              _context.next = 18;\n              break;\n\n            case 14:\n              // Export text signature as SVG\n              signatureSVG = exportSignatureAsSVG(signature);\n              _context.next = 17;\n              return convertToBuffer(signatureSVG);\n\n            case 17:\n              signatureNFT = _context.sent;\n\n            case 18:\n              return _context.abrupt(\"return\", signatureNFT);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getSignature() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var onClaimNFT = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var signatureNFT, imghash, nftMetadata, ipfsNFTMetadata, signer, contract, mintValue, nftTxn;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              e.preventDefault();\n\n              if (signature) {\n                _context2.next = 4;\n                break;\n              }\n\n              setErrorMessage(\"Please either draw or type a signature before claiming the NFT\");\n              return _context2.abrupt(\"return\");\n\n            case 4:\n              if (web3Provider) {\n                _context2.next = 7;\n                break;\n              }\n\n              setErrorMessage(\"Please connect your wallet first before claiming the NFT\");\n              return _context2.abrupt(\"return\");\n\n            case 7:\n              if (signature || web3Provider) {\n                setErrorMessage(\"\");\n              }\n\n              _context2.next = 10;\n              return getSignature();\n\n            case 10:\n              signatureNFT = _context2.sent;\n\n              if (signatureNFT) {\n                _context2.next = 13;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 13:\n              _context2.next = 15;\n              return addDataToIPFS(signatureNFT, true);\n\n            case 15:\n              imghash = _context2.sent;\n              // // Create NFT metadata and add it to IPFS\n              nftMetadata = createNFTMeta(imghash, signature);\n              _context2.next = 19;\n              return addDataToIPFS(nftMetadata);\n\n            case 19:\n              ipfsNFTMetadata = _context2.sent;\n              signer = web3Provider.getSigner();\n              contract = getContract(signer);\n              mintValue = ethers.utils.parseEther(totalPrice);\n              _context2.next = 25;\n              return contract.mintSignature(signature.length, signature, \"ipfs://\".concat(ipfsNFTMetadata), {\n                value: mintValue,\n                gasLimit: 6000000\n              });\n\n            case 25:\n              nftTxn = _context2.sent;\n              setTxn({\n                mintedOn: new Date().toDateString(),\n                txnStatus: txnStatusType.PENDING,\n                txnValue: mintValue,\n                txnHash: nftTxn.hash,\n                txnLink: TRANSACTION_LINK + nftTxn.hash\n              });\n              setOpenModal(true);\n              _context2.prev = 28;\n              _context2.next = 31;\n              return nftTxn.wait();\n\n            case 31:\n              _context2.next = 36;\n              break;\n\n            case 33:\n              _context2.prev = 33;\n              _context2.t0 = _context2[\"catch\"](28);\n              console.log(_context2.t0);\n\n            case 36:\n              _context2.next = 38;\n              return getTransactionReceipt(nftTxn.hash);\n\n            case 38:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[28, 33]]);\n    }));\n\n    return function onClaimNFT(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getTransactionReceipt = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(txnHash) {\n      var txReceipt;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return web3Provider.getTransactionReceipt(txnHash);\n\n            case 2:\n              txReceipt = _context3.sent;\n\n              if (!(txReceipt && txReceipt.blockNumber && txReceipt.status)) {\n                _context3.next = 6;\n                break;\n              }\n\n              setTxn(function (prevTxn) {\n                return _objectSpread(_objectSpread({}, prevTxn), {}, {\n                  txnStatus: txnStatusType.CONFIRMED,\n                  gasUsed: txReceipt.gasUsed.toString() //The amount of gas actually used by this transaction.\n\n                });\n              });\n              return _context3.abrupt(\"return\");\n\n            case 6:\n              setTxn(function (prevTxn) {\n                return _objectSpread(_objectSpread({}, prevTxn), {}, {\n                  txnStatus: txnStatusType.REVERTED,\n                  gasUsed: txReceipt.gasUsed.toString()\n                });\n              });\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getTransactionReceipt(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var testModal = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var txnHash, timer;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              txnHash = \"0x6c8ee629793671f46cab0d5571560e3f2716b6ab520fbc7994c9da3c446d9f15\";\n              setTxn({\n                mintedOn: new Date().toDateString(),\n                txnStatus: txnStatus.PENDING,\n                txnValue: 1000,\n                txnHash: txnHash,\n                txnLink: TRANSACTION_LINK + txnHash\n              });\n              setOpenModal(true);\n              timer = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return getTransactionReceipt(txnHash);\n\n                      case 2:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              })), 5000); // clearTimeout(timer);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function testModal() {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // Create a function to get random english names using API call\n\n\n  var getRandomName = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return fetch(\"https://randomuser.me/api/?nat=us&results=1\");\n\n            case 2:\n              response = _context6.sent;\n              _context6.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context6.sent;\n              setRandomName(data.results[0].name.first + \" \" + data.results[0].name.last);\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getRandomName() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var getdefaultValuesFromContract = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var contract, xPricePerUnit, pricePerUnit, customSignatureUnits;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              contract = getContract(defaultProvider);\n              _context7.next = 3;\n              return contract.xPricePerUnit();\n\n            case 3:\n              xPricePerUnit = _context7.sent;\n              _context7.next = 6;\n              return contract.pricePerUnit();\n\n            case 6:\n              pricePerUnit = _context7.sent;\n              _context7.next = 9;\n              return contract.getCustomSignatureUnits();\n\n            case 9:\n              customSignatureUnits = _context7.sent;\n              xPricePerUnit = ethers.utils.formatEther(xPricePerUnit).toString();\n              pricePerUnit = ethers.utils.formatEther(pricePerUnit).toString();\n              xPricePerUnit = parseFloat(xPricePerUnit);\n              pricePerUnit = parseFloat(pricePerUnit);\n              setXPricePerUnit(xPricePerUnit);\n              setPricePerUnit(pricePerUnit);\n              setCustomSignatureUnits(customSignatureUnits);\n\n            case 17:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function getdefaultValuesFromContract() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var getUserExistingMintedSignature = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(itemId) {\n      var contract, existingSignature, ipfsHash, meta, currentSignature;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (address) {\n                _context8.next = 2;\n                break;\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 2:\n              contract = getContract(defaultProvider);\n              _context8.next = 5;\n              return contract.getSignature(address);\n\n            case 5:\n              existingSignature = _context8.sent;\n              ipfsHash = existingSignature[1];\n              ipfsHash = ipfsHash.replace(\"ipfs://\", \"\");\n              _context8.next = 10;\n              return retrieveDataFromIPFS(ipfsHash);\n\n            case 10:\n              meta = _context8.sent;\n              currentSignature = _objectSpread(_objectSpread({}, meta.data), {}, {\n                ipfs_url: meta.data.web3Storage,\n                mintedOn: new Date(meta.data.attributes[1].value),\n                openseaNFT: \"\".concat(OPENSEA_LINK, \"/\").concat(itemId - 1)\n              });\n              setExistingSignature(currentSignature);\n              setIsLoading(false);\n              setShowConfetti(true);\n              setIsEligibleToMint(false);\n\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function getUserExistingMintedSignature(_x3) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var getUserInformation = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var contract, isEligibleToDiscount, isEligibleToMint;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              setIsLoading(true);\n              contract = getContract(defaultProvider);\n              _context9.next = 4;\n              return contract.checkElegibleMember(address);\n\n            case 4:\n              isEligibleToDiscount = _context9.sent;\n              _context9.next = 7;\n              return contract.addressToSignature(address);\n\n            case 7:\n              isEligibleToMint = _context9.sent;\n\n              if (!(isEligibleToMint.toString() === \"0\")) {\n                _context9.next = 14;\n                break;\n              }\n\n              setIsEligibleToMint(true);\n              setExistingSignature(null);\n              setIsLoading(false);\n              _context9.next = 16;\n              break;\n\n            case 14:\n              _context9.next = 16;\n              return getUserExistingMintedSignature(isEligibleToMint);\n\n            case 16:\n              setIsEligibleToDiscount(isEligibleToDiscount);\n\n            case 17:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function getUserInformation() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var renderTextSignature = function renderTextSignature() {\n    if (enableCanvasSignature) {\n      return jsx(CanvasText, {\n        changeText: signature || randomName,\n        ref: textCanvasRef\n      });\n    }\n\n    return jsx(\"h1\", {\n      sx: styles.signatureText\n    }, signature || randomName);\n  };\n\n  var renderCanvasInput = function renderCanvasInput() {\n    return toggleHandSignature ? jsx(CanvasSignature, {\n      ref: handwrittenCanvasRef\n    }) : renderTextSignature();\n  };\n\n  var renderInput = function renderInput() {\n    return !existingSignature ? jsx(React.Fragment, null, jsx(Input, {\n      type: \"text\",\n      placeholder: \"Enter Your Signature\",\n      value: signature || \"\",\n      onChange: onChangeTextSignature\n    }), jsx(Button, {\n      onClick: onClaimNFT\n    }, \"Claim NFT\")) : jsx(Text, {\n      as: \"h3\"\n    }, \"Our minions report that you have succesfully minted your signature NFT\", existingSignature && \" on \" + existingSignature.mintedOn.toDateString() + \" at \" + existingSignature.mintedOn.toLocaleTimeString());\n  };\n\n  var renderButton = function renderButton() {\n    if (existingSignature) {\n      return jsx(React.Fragment, null, jsx(\"a\", {\n        href: existingSignature.openseaNFT,\n        target: \"_blank\"\n      }, jsx(Button, {\n        variant: \"secondary\"\n      }, \"Check you signature NFT at Opensea\")), jsx(\"a\", {\n        href: OPENSEA_COLLECTION_LINK,\n        target: \"_blank\"\n      }, jsx(Button, null, \"Check Collection at Opensea\")));\n    }\n\n    return jsx(React.Fragment, null, jsx(Button, {\n      onClick: function onClick() {\n        return setToggleHandSignature(function (prevState) {\n          return !prevState;\n        });\n      },\n      variant: \"secondary\"\n    }, toggleHandSignature ? \"Type your signature \" : \"Create your own custom handwritten signature\"), jsx(Button, {\n      onClick: clearSignature\n    }, \"Clear\"));\n  };\n\n  var getTextCanvasSignature = function getTextCanvasSignature() {\n    if (!textCanvasRef.current) return;\n    var textCanvasSignature = textCanvasRef.current.toDataURL(\"image/png\");\n    return textCanvasSignature;\n  };\n\n  var getHandwrittenCanvasSignature = function getHandwrittenCanvasSignature() {\n    if (!handwrittenCanvasRef.current) return;\n    var handSignature = handwrittenCanvasRef.current.toDataURL(\"image/png\");\n    return handSignature;\n  };\n\n  var clearSignature = function clearSignature() {\n    if (toggleHandSignature) {\n      if (!handwrittenCanvasRef.current) return;\n      handwrittenCanvasRef.current.clear();\n      return;\n    }\n\n    setSignature(\" \");\n  };\n\n  var onCloseModal = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              setOpenModal(function (prevState) {\n                return !prevState;\n              });\n\n              if (!(txn && txn.txnStatus && txn.txnStatus === txnStatusType.CONFIRMED)) {\n                _context10.next = 6;\n                break;\n              }\n\n              setIsLoading(true);\n              _context10.next = 5;\n              return getUserInformation();\n\n            case 5:\n              setShowConfetti(true);\n\n            case 6:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function onCloseModal() {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var calaculateTextSingaturePriceValue = function calaculateTextSingaturePriceValue(currentSignature) {\n    var price;\n\n    if (isEligibleToDiscount) {\n      price = currentSignature.length * pricePerUnit;\n    } else {\n      price = currentSignature.length * xPricePerUnit;\n    }\n\n    setSignature(currentSignature);\n    setTotalPrice(price.toFixed(3));\n  };\n\n  var onChangeTextSignature = function onChangeTextSignature(event) {\n    var signature = event.target.value;\n    calaculateTextSingaturePriceValue(signature);\n  };\n\n  var calaculateHandwrittenSingaturePriceValue = function calaculateHandwrittenSingaturePriceValue(currentSize) {\n    var calculatePriceValue = calculateSignatureSizePrice(customSignatureUnits, currentSize);\n\n    if (isEligibleToDiscount) {\n      calculatePriceValue *= pricePerUnit;\n    } else {\n      calculatePriceValue *= xPricePerUnit;\n    }\n\n    setTotalPrice(calculatePriceValue.toFixed(3));\n  };\n\n  var onChangeHandwrittenSignatureSize = function onChangeHandwrittenSignatureSize(e) {\n    var currentSize = e.target.value;\n    calaculateHandwrittenSingaturePriceValue(currentSize);\n  };\n\n  var LoaderComponent = jsx(React.Fragment, null, jsx(Flex, null, jsx(Text, {\n    as: \"h3\"\n  }, \"Please wait while our minions get some info...\"), jsx(Loader, {\n    sx: styles.loader,\n    type: \"TailSpin\",\n    color: \"#FFC059\",\n    height: 25,\n    width: 25\n  })));\n  useEffect(function () {\n    if (toggleHandSignature) {\n      calaculateHandwrittenSingaturePriceValue(\"small\"); //default size is 'small'\n\n      return;\n    }\n\n    calaculateTextSingaturePriceValue(signature);\n  }, [toggleHandSignature]);\n  useEffect(function () {\n    if (showConfetti) setShowConfetti(false);\n\n    if (!address) {\n      setExistingSignature(null);\n      return;\n    }\n\n    getUserInformation();\n  }, [address]);\n  useEffect(function () {\n    getRandomName();\n    getdefaultValuesFromContract();\n  }, []);\n  return jsx(React.Fragment, null, jsx(Box, {\n    as: \"section\",\n    id: \"home\",\n    sx: (styles.section, styles.random)\n  }, txn && jsx(Modal, {\n    open: openModal,\n    txn: txn,\n    onClose: onCloseModal\n  }), jsx(Container, null, showConfetti && jsx(ConfettiComponent, null), jsx(Box, {\n    sx: styles.contentWrapper\n  }, jsx(Box, {\n    sx: styles.bannerContent\n  }, jsx(Heading, {\n    as: \"h1\"\n  }, \"Get Your Own Personalized NFT Signature\"), jsx(Text, {\n    as: \"p\"\n  }, \"Your NFT Signature is an identity you can use in the Web3 world, any way you want!\"), errorMessage && jsx(Text, {\n    color: \"red\"\n  }, errorMessage), jsx(Flex, {\n    as: \"form\",\n    sx: styles.signatureForm\n  }, isLoading ? LoaderComponent : renderInput()), !existingSignature && jsx(Flex, {\n    as: \"form\",\n    sx: styles.signatureForm\n  }, jsx(Text, {\n    as: \"p\"\n  }, jsx(\"strong\", null, isEligibleToDiscount ? \"Elegible for a discount\" : \"Not elegible for a discount \"), \"\\xA0\"), jsx(Text, {\n    as: \"p\"\n  }, \"MATIC to pay : \", totalPrice))), jsx(Box, null, jsx(Flex, {\n    as: \"figure\",\n    sx: styles.bannerImage\n  }, existingSignature && existingSignature.ipfs_url ? jsx(Image, {\n    src: existingSignature.ipfs_url\n  }) : renderCanvasInput()), toggleHandSignature && !existingSignature && jsx(Flex, {\n    as: \"form\",\n    sx: styles.sizeRadio\n  }, jsx(RadioSelect, {\n    onSizeChange: onChangeHandwrittenSignatureSize\n  }))), renderButton()))));\n};\n\nexport default HomePage;\nvar styles = {\n  section: {\n    backgroundColor: \"#FFFCF7\",\n    pt: [14, null, null, null, null, 0],\n    pb: [6, null, null, 7, 11, 0]\n  },\n  contentWrapper: {\n    gap: [\"50px 50px\"],\n    mt: \"5%\",\n    display: [\"block\", null, null, null, \"grid\"],\n    gridTemplateColumns: [null, null, null, null, \"1fr 1fr\", \"0.95fr 1.05fr\"],\n    alignItems: \"center\",\n    minHeight: [\"auto\", null, null, null, \"38vh\", \"80vh\"],\n    pt: [null, null, null, 8, 0, 9, null],\n    \"@media only screen and (min-width:1900px)\": {\n      pt: 10\n    },\n    a: {\n      textDecoration: \"none\",\n      button: {\n        width: \"100%\"\n      }\n    }\n  },\n  bannerContent: {\n    margin: [null, null, null, \"0 auto\", 0],\n    maxWidth: [null, null, null, 600, \"none\"],\n    textAlign: [null, null, null, \"center\", \"left\"],\n    h1: {\n      fontWeight: 700,\n      fontSize: [8, null, null, 10, 45, null, 12, 14],\n      lineHeight: [1.26, null, null, 1.5, 1.2, 1.26],\n      letterSpacing: [0, null, null, null, \"-1.5px\"],\n      color: \"textSecondary\",\n      \"@media screen and (min-width: 1441px) and (max-width:1600px)\": {\n        fontSize: 12,\n        lineHeight: 1.5\n      }\n    },\n    p: {\n      fontSize: [1, null, null, 2, 3],\n      lineHeight: [1.5, null, null, 2, null, 2.33],\n      color: \"textSecondary\",\n      maxWidth: [470],\n      m: [null, null, null, \"30px auto\", 0],\n      mt: [3, null, null, null, 5]\n    }\n  },\n  signatureForm: {\n    maxWidth: [null, null, null, 470, \"none\"],\n    m: [null, null, null, \"30px auto\", \"30px 0 0\"],\n    mt: [6],\n    input: {\n      backgroundColor: \"#FFFFFF\",\n      border: \"0 none\",\n      fontFamily: \"body\",\n      fontSize: [1, null, null, null, 2],\n      px: [5],\n      boxShadow: \"0px 16px 40px rgba(72, 59, 26, 0.08)\",\n      minHeight: [40, 50, null, null, null, 60],\n\n      /* Chrome, Firefox, Opera, Safari 10.1+ */\n      \"::placeholder\": {\n        color: rgba(\"#02073E\", 0.4),\n        opacity: 1\n        /* Firefox */\n\n      }\n    },\n    button: {\n      fontSize: [0, 1, null, null, 2],\n      minHeight: [40, 50, null, null, null, 60]\n    }\n  },\n  loader: {\n    marginLeft: \"1em\"\n  },\n  sizeRadio: {\n    mt: \"2%\" // mt: [10],\n\n  },\n  sponsoredBy: {\n    alignItems: \"center\",\n    maxWidth: [null, null, null, 470, \"none\"],\n    m: [null, null, null, \"30px auto\", \"30px 0 0\"],\n    mt: [6],\n    span: {\n      fontSize: [\"13px\", null, null, null, 2],\n      lineHeight: 2.62,\n      color: rgba(\"#566272\", 0.6)\n    }\n  },\n  sponsor: {\n    alignItems: \"center\",\n    figure: {\n      ml: [2, null, null, null, 4, 5],\n      img: {\n        maxWidth: [\"60px\", null, null, null, \"80px\", \"100%\"]\n      }\n    }\n  },\n  signatureText: {\n    fontFamily: \"Gochi Hand, cursive\",\n    fontSize: [38, null, null, null, 38],\n    color: \"primary\"\n  },\n  bannerImage: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    mt: [0, null, null, null, 0],\n    img: {\n      maxWidth: [null, null, null, \"80%\", \"100%\"],\n      m: [0, null, null, \"0 auto\", 0]\n    },\n    backgroundColor: \"black\",\n    borderRadius: \"1.25rem\",\n    height: \"400px\"\n  }\n};","map":null,"metadata":{},"sourceType":"module"}