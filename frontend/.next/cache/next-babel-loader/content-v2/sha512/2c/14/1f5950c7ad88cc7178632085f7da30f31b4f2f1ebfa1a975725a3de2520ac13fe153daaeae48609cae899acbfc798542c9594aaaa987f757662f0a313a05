{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { useState, useEffect, useContext } from \"react\";\nimport { jsx, Box, Container, Flex, Button } from \"theme-ui\";\nimport Sticky from \"react-stickynode\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { DrawerProvider } from \"contexts/drawer/drawer-provider\";\nimport NavbarDrawer from \"./navbar-drawer\";\nimport Logo from \"components/logo\";\nimport { getWeb3Modal, switchNetwork } from \"utils/web3connect\";\nimport { Web3CreateContext } from \"contexts/web3-context\";\nimport { SET_WEB3_PROVIDER, RESET_WEB3_PROVIDER, SET_CHAIN_ID, SET_ADDRESS } from \"contexts/web3-constants\";\nimport { CURRENT_NETWORK } from \"utils/constants\";\nexport default function Header() {\n  const {\n    state,\n    dispatch\n  } = useContext(Web3CreateContext);\n  const {\n    provider,\n    address,\n    chainId\n  } = state;\n  const {\n    0: web3Modal,\n    1: setWeb3Modal\n  } = useState();\n  const {\n    0: stateMobile,\n    1: setState\n  } = useState({\n    isMobileMenu: false,\n    isSticky: false\n  });\n\n  const handleCloseMenu = () => {\n    setState(_objectSpread(_objectSpread({}, stateMobile), {}, {\n      isMobileMenu: false\n    }));\n  };\n\n  const onWeb3Connect = async () => {\n    if (!web3Modal) return;\n\n    try {\n      const provider = await web3Modal.connect(); // We plug the initial `provider` into ethers.js and get back\n      // a Web3Provider. This will add on methods from ethers.js and\n      // event listeners such as `.on()` will be different.\n\n      const web3Provider = new Web3Provider(provider, \"any\");\n      const signer = web3Provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await web3Provider.getNetwork();\n      dispatch({\n        type: SET_WEB3_PROVIDER,\n        provider,\n        web3Provider,\n        address,\n        chainId: network.chainId\n      });\n    } catch (e) {\n      console.log(\"Web3Error caught\", e);\n    }\n  };\n\n  const onWeb3Disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n\n    if (provider !== null && provider !== void 0 && provider.disconnect && typeof provider.disconnect === \"function\") {\n      await provider.disconnect();\n    }\n\n    dispatch({\n      type: RESET_WEB3_PROVIDER\n    });\n  };\n\n  useEffect(() => {\n    if (provider) {\n      const handleChainChanged = chainId => {\n        chainId = parseInt(chainId, 16);\n        dispatch({\n          type: SET_CHAIN_ID,\n          chainId: chainId\n        });\n      };\n\n      const handleAccountChanged = accounts => {\n        dispatch({\n          type: SET_ADDRESS,\n          address: accounts[0]\n        });\n      };\n\n      provider.on(\"chainChanged\", handleChainChanged);\n      provider.on(\"accountsChanged\", handleAccountChanged); // Subscription Cleanup\n\n      return () => {\n        if (provider.removeListener) {\n          provider.removeListener(\"chainChanged\", handleChainChanged);\n        }\n      };\n    }\n  }, [provider]);\n  useEffect(() => {\n    const web3Modal = getWeb3Modal();\n    setWeb3Modal(web3Modal);\n  }, []);\n  return jsx(DrawerProvider, null, jsx(Box, {\n    sx: styles.headerWrapper\n  }, jsx(Sticky, {\n    enabled: true,\n    top: 0,\n    activeClass: \"is-sticky\",\n    innerZ: 100\n  }, jsx(Box, {\n    as: \"header\",\n    variant: \"layout.header\",\n    className: stateMobile.isMobileMenu ? \"is-mobile-menu\" : \"\"\n  }, jsx(Container, null, jsx(Box, {\n    sx: styles.headerInner\n  }, jsx(Logo, {\n    sx: styles.logo,\n    isSticky: stateMobile.isSticky\n  }), jsx(Flex, {\n    as: \"nav\",\n    sx: styles.navbar,\n    className: stateMobile.isMobileMenu ? \"navbar active\" : \"navbar\"\n  }, jsx(Box, {\n    as: \"ul\",\n    sx: styles.navList,\n    className: stateMobile.isMobileMenu ? \"active\" : \"\"\n  })), jsx(Flex, null, provider && !(chainId === (CURRENT_NETWORK === null || CURRENT_NETWORK === void 0 ? void 0 : CURRENT_NETWORK.chainId)) && jsx(Button, {\n    variant: \"text\",\n    sx: styles.error,\n    onClick: switchNetwork\n  }, \"Change to \", CURRENT_NETWORK === null || CURRENT_NETWORK === void 0 ? void 0 : CURRENT_NETWORK.name), address && jsx(Button, {\n    variant: \"text\",\n    sx: styles.getStarted\n  }, address.substring(0, 4) + \"...\" + address.substring(address.length - 3, address.length)), provider ? jsx(Button, {\n    variant: \"text\",\n    sx: styles.getStarted,\n    onClick: onWeb3Disconnect\n  }, \"Disconnect\") : jsx(Button, {\n    variant: \"text\",\n    sx: styles.getStarted,\n    onClick: onWeb3Connect\n  }, \"Connect\")), jsx(NavbarDrawer, null)))))));\n}\nconst styles = {\n  headerWrapper: {\n    justifyContent: \"space-between\",\n    backgroundColor: \"#FFFCF7\",\n    header: {\n      position: \"fixed\",\n      left: 0,\n      right: 0,\n      py: [4],\n      transition: \"all 0.3s ease-in-out 0s\",\n      \"&.is-mobile-menu\": {\n        backgroundColor: \"white\"\n      }\n    },\n    \".is-sticky\": {\n      header: {\n        backgroundColor: \"white\",\n        py: [\"13px\"],\n        boxShadow: \"0 6px 13px rgba(38,78,118,0.1)\"\n      }\n    }\n  },\n  headerInner: {\n    display: \"flex\",\n    // alignItems: \"center\",\n    justifyContent: \"space-between\",\n    position: [\"relative\", null, null, \"static\"]\n  },\n  logo: {\n    mr: [null, null, null, null, 30, 12]\n  },\n  navbar: {\n    display: [\"none\", null, null, null, \"flex\"],\n    alignItems: \"center\",\n    flexGrow: 1,\n    // justifyContent: 'center',\n    li: {\n      display: \"flex\",\n      alignItems: \"center\",\n      a: {\n        cursor: \"pointer\",\n        transition: \"all 0.3s ease-in-out 0s\"\n      }\n    }\n  },\n  navList: {\n    display: [\"flex\"],\n    listStyle: \"none\",\n    flexGrow: 1,\n    p: 0,\n    \".nav-item\": {\n      cursor: \"pointer\",\n      fontWeight: 400,\n      padding: 0,\n      margin: [null, null, null, null, \"0 15px\"]\n    },\n    \".active\": {\n      color: \"primary\"\n    }\n  },\n  getStarted: {\n    backgroundColor: \"#FFF0D7\",\n    color: \"#E6A740\",\n    p: [\"0 16px\"],\n    minHeight: 45,\n    ml: [6],\n    display: [\"none\", null, null, null, \"flex\"]\n  },\n  error: {\n    backgroundColor: \"#ffd7dd\",\n    color: \"#e64040\",\n    p: [\"0 16px\"],\n    minHeight: 45,\n    ml: [6],\n    display: [\"none\", null, null, null, \"flex\"]\n  }\n};","map":null,"metadata":{},"sourceType":"module"}