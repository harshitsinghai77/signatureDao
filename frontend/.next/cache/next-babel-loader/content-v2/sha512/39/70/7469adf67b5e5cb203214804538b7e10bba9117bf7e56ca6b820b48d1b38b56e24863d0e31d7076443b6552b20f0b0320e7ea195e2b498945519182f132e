{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport { motion } from 'framer-motion';\nexport const AccordionButton = (_ref) => {\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return jsx(\"div\", _extends({\n    sx: styles.buttonToggle\n  }, rest), children);\n};\nconst styles = {\n  accordionItem: {\n    overflow: 'hidden',\n    '+ .accordion-item': {\n      mt: [3]\n    }\n  },\n  buttonToggle: {\n    display: 'flex',\n    alignItems: ['center'],\n    justifyContent: 'space-between',\n    cursor: 'pointer',\n    position: 'relative'\n  },\n  accordionContent: {\n    overflow: 'hidden',\n    lineHeight: 2,\n    mt: [4]\n  }\n};\nconst variants = {\n  open: {\n    height: 'auto',\n    marginTop: 16\n  },\n  closed: {\n    height: 0,\n    marginTop: 0\n  }\n};\nexport function AccordionContents(_ref2) {\n  let {\n    isOpen\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"isOpen\"]);\n\n  return jsx(motion.div, _extends({\n    initial: \"closed\",\n    animate: isOpen ? 'open' : 'closed',\n    variants: variants,\n    sx: styles.accordionContent\n  }, props));\n}\nexport const AccordionItem = (_ref3) => {\n  let {\n    isOpen,\n    children,\n    className\n  } = _ref3,\n      rest = _objectWithoutProperties(_ref3, [\"isOpen\", \"children\", \"className\"]);\n\n  return jsx(\"div\", _extends({\n    className: `accordion-item ${className}`,\n    sx: styles.accordionItem\n  }, rest), children);\n};\nexport const preventClose = (state, changes) => changes.type === 'closing' && state.openIndexes.length < 2 ? _objectSpread(_objectSpread({}, changes), {}, {\n  openIndexes: state.openIndexes\n}) : changes;\nexport const single = (state, changes) => changes.type === 'opening' ? _objectSpread(_objectSpread({}, changes), {}, {\n  openIndexes: changes.openIndexes.slice(-1)\n}) : changes;\nexport const combineReducers = (...reducers) => (state, changes) => reducers.reduce((acc, reducer) => reducer(state, acc), changes);","map":null,"metadata":{},"sourceType":"module"}