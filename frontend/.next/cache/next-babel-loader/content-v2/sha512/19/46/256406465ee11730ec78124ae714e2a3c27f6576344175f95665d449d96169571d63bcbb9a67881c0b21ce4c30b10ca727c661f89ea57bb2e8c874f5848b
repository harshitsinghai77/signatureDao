{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/** @jsx jsx */\nimport { jsx, Heading } from 'theme-ui';\nimport { BsArrowRight } from 'react-icons/bs';\nimport { BaseAccordion } from './base-accordion';\nimport { AccordionButton, AccordionItem, AccordionContents, single, preventClose, combineReducers } from './shared';\nimport { rgba } from 'polished';\nexport default function Accordion(_ref) {\n  let {\n    items\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"items\"]);\n\n  return jsx(BaseAccordion, _extends({\n    stateReducer: combineReducers(single, preventClose)\n  }, props), ({\n    openIndexes,\n    handleItemClick\n  }) => jsx(React.Fragment, null, items.map((item, index) => jsx(AccordionItem, {\n    key: item.title,\n    sx: styles.accordion,\n    isOpen: openIndexes.includes(index),\n    className: openIndexes.includes(index) ? 'is-open' : 'is-closed'\n  }, jsx(AccordionButton, {\n    onClick: () => handleItemClick(index)\n  }, jsx(Heading, {\n    as: \"h3\",\n    sx: styles.title\n  }, item.title), !openIndexes.includes(index) && jsx(BsArrowRight, {\n    size: \"28px\",\n    color: rgba('#0F2137', 0.3),\n    sx: styles.arrow\n  })), jsx(AccordionContents, {\n    isOpen: openIndexes.includes(index),\n    sx: styles.content\n  }, item.contents)))));\n}\nconst styles = {\n  accordion: {\n    backgroundColor: '#F6F8FB',\n    borderRadius: 10,\n    p: ['15px', '20px 30px', '30px 45px', '20px 25px', '20px 35px'],\n    '&.is-open': {\n      backgroundColor: '#fff',\n      boxShadow: '0px 9px 30px rgba(69, 88, 157, 0.08)'\n    }\n  },\n  title: {\n    color: 'heading',\n    fontWeight: 500,\n    fontSize: [1, null, null, 2],\n    letterSpacing: [0, null, null, null, 'heading'],\n    lineHeight: [1.5, 1.8]\n  },\n  arrow: {\n    width: [20, null, null, 25]\n  },\n  content: {\n    fontSize: [1, null, null, 2]\n  }\n};","map":null,"metadata":{},"sourceType":"module"}